/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"

#include "DesignerWindowComponent.h"

#include <engine.h>
#include <data_relay.h>

#include "UiSession.h"
#include "DesignerWindow.h"
#include "Commands.h"
#include "MenuBar.h"

//==============================================================================
class DesignerApplication  : public JUCEApplication
{
public:
    //==============================================================================
    DesignerApplication() {}

    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }

    //==============================================================================
    void initialise(const String& commandLine) override
    {
        // This method is where you should put your application's initialisation code..
        if (applicationCommandManager == nullptr) {
            applicationCommandManager = new ApplicationCommandManager();
        }
        
        engine = make_unique<Engine>();
        dataRelay = &engine->getDataRelay();

        session = make_unique<UiSession>(engine->getSession());

        unique_ptr<ProjectDocument> projectDocument = make_unique<ProjectDocument>(*session);
        projectDocument->loadDemoDocument();

        commands = new Commands(*projectDocument, *applicationCommandManager);
        menuBar = new MenuBar(*applicationCommandManager);
        
        // engine->setProfilerEnabled(true);
        engine->start();
        
        designerWindow = new DesignerWindow(getApplicationName(), move(projectDocument),
            *session, *applicationCommandManager, *menuBar);
    }

    void shutdown() override
    {
        engine->wait();
        designerWindow = nullptr; // (deletes our window)
        dataRelay = nullptr;
        session = nullptr;
        engine = nullptr;
    }
    
    //==============================================================================
    void preMainRunLoop() override
    {
        if (dataRelay) {
            dataRelay->processIncomingTransactions();
        }
    }
    
    void postMainRunLoop() override
    {
        if (dataRelay) {
            dataRelay->commitOutgoingTransaction();
        }
    }

    //==============================================================================
    void systemRequestedQuit() override
    {
        if (engine) {
            engine->stop();
        }
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted(const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

private:
    ScopedPointer<DesignerWindow> designerWindow;
    ScopedPointer<ApplicationCommandManager> applicationCommandManager;
    ScopedPointer<MenuBar> menuBar;
    ScopedPointer<Commands> commands;
    
    unique_ptr<Engine> engine;
    unique_ptr<UiSession> session;
    DataRelay* dataRelay = nullptr;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (DesignerApplication)
